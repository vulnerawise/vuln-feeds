{
  "metadata": {
    "timestamp": "2025-02-24T22:10:25Z"
  },
  "data": [
    {
      "cve": {
        "id": "CVE-2024-39486",
        "description": "In the Linux kernel, the following vulnerability has been resolved:\n\ndrm/drm_file: Fix pid refcounting race\n\n\u003cmaarten.lankhorst@linux.intel.com\u003e, Maxime Ripard\n\u003cmripard@kernel.org\u003e, Thomas Zimmermann \u003ctzimmermann@suse.de\u003e\n\nfilp-\u003epid is supposed to be a refcounted pointer; however, before this\npatch, drm_file_update_pid() only increments the refcount of a struct\npid after storing a pointer to it in filp-\u003epid and dropping the\ndev-\u003efilelist_mutex, making the following race possible:\n\nprocess A               process B\n=========               =========\n                        begin drm_file_update_pid\n                        mutex_lock(\u0026dev-\u003efilelist_mutex)\n                        rcu_replace_pointer(filp-\u003epid, \u003cpid B\u003e, 1)\n                        mutex_unlock(\u0026dev-\u003efilelist_mutex)\nbegin drm_file_update_pid\nmutex_lock(\u0026dev-\u003efilelist_mutex)\nrcu_replace_pointer(filp-\u003epid, \u003cpid A\u003e, 1)\nmutex_unlock(\u0026dev-\u003efilelist_mutex)\nget_pid(\u003cpid A\u003e)\nsynchronize_rcu()\nput_pid(\u003cpid B\u003e)   *** pid B reaches refcount 0 and is freed here ***\n                        get_pid(\u003cpid B\u003e)   *** UAF ***\n                        synchronize_rcu()\n                        put_pid(\u003cpid A\u003e)\n\nAs far as I know, this race can only occur with CONFIG_PREEMPT_RCU=y\nbecause it requires RCU to detect a quiescent state in code that is not\nexplicitly calling into the scheduler.\n\nThis race leads to use-after-free of a \"struct pid\".\nIt is probably somewhat hard to hit because process A has to pass\nthrough a synchronize_rcu() operation while process B is between\nmutex_unlock() and get_pid().\n\nFix it by ensuring that by the time a pointer to the current task's pid\nis stored in the file, an extra reference to the pid has been taken.\n\nThis fix also removes the condition for synchronize_rcu(); I think\nthat optimization is unnecessary complexity, since in that case we\nwould usually have bailed out on the lockless check above.",
        "metadata": {
          "published_date": "2024-07-06T10:15:03.393",
          "last_modified_date": "2024-11-21T09:27:47.623",
          "confidence_level": "medium",
          "severity": "high"
        },
        "impact": {
          "cisa_kev": false,
          "reported_exploited": false,
          "exploit_maturity": "poc",
          "automatable": false
        },
        "counts": {
          "public_exploit_count": 2
        },
        "epss": {
          "score": 0.00042,
          "percentile": 0.05019
        },
        "metrics": [
          {
            "source": "nvd@nist.gov",
            "type": "Primary",
            "cvss_version": "3.1",
            "vector_string": "CVSS:3.1/AV:L/AC:H/PR:L/UI:N/S:U/C:H/I:H/A:H",
            "attack_vector": "LOCAL",
            "base_score": 7
          }
        ],
        "timeline": {
          "references": [
            {
              "type": "reference",
              "url": "https://0day.today/exploit/description/39698",
              "source_type": "poc",
              "source": "0day",
              "description": "Linux DRM drm_file_update_pid() Race Condition / Use-After-Free Exploit",
              "published": "2024-08-07T05:00:00.000Z"
            },
            {
              "type": "reference",
              "url": "https://packetstormsecurity.com/files/download/179909/GS20240805171400.txt",
              "source_type": "poc",
              "source": "packetstorm",
              "description": "Linux DRM drm_file_update_pid() Race Condition / Use-After-Free",
              "published": "2024-08-05T05:00:00.000Z"
            }
          ],
          "repositories": []
        }
      }
    }
  ]
}